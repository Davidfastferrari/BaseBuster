/* 
fn extract_profit(frame: &CallFrame) -> Option<U256> {
    for log in &frame.logs {
        if let Some(topics) = &log.topics {
            for topic in topics {
                if topic.starts_with(&FlashSwap::ActualValue::SIGNATURE_HASH[..8]) {
                    println!("Found matching topic: {:?}", topic);
                    println!("{}", log.data.clone().unwrap());
                }
            }
        }
    }
    for call in &frame.calls {
        if let Some(child_profit) = extract_profit(call) {
            return Some(child_profit);
        }
    }
    None
}
fn print_profit_data(call_trace: &CallFrame) {
    // Helper function to recursively search for the profit event
    fn search_logs(frame: &CallFrame) {
        for log in &frame.logs {
            if let Some(topics) = &log.topics {
                if topics.len() > 0 && topics[0] == "0x357d905f1831209797df4d55d79c5c5bf1d9f7311c976afd05e13d881eab9bc8".parse::<alloy::primitives::FixedBytes<32>>().unwrap() {
                    // This is the profit event
                    if let Some(data) = &log.data {
                        println!("Profit data: 0x{}", hex::encode(data));
                    }
                }
            }
        }
        
        // Recursively search in nested calls
        for call in &frame.calls {
            search_logs(call);
        }
    }

    search_logs(call_trace);
}


    fn extract_final_balance(call_trace: &CallFrame) -> Option<U256> {
        // Function to recursively search for the last balance check
        fn search_calls(frame: &CallFrame) -> Option<U256> {
            // Check if this is a balance check call
            if frame.input.starts_with(b"\x70\xa0\x82\x31") && frame.output.is_some() {
                // This is likely a balanceOf call, parse the output
                return frame.output.as_ref().and_then(|output| {
                    if output.len() >= 32 {
                        Some(U256::from_be_bytes::<32>(output[0..32].try_into().unwrap()))
                    } else {
                        None
                    }
                });
            }

            // If not, search through subcalls in reverse order
            for subcall in frame.calls.iter().rev() {
                if let Some(balance) = search_calls(subcall) {
                    return Some(balance);
                }
            }

            None
        }

        search_calls(call_trace)
    }
    */