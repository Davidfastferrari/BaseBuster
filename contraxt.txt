// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IUniswapV3Pool {
    function token0() external view returns (address);
    function token1() external view returns (address);
    function swap(
        address recipient,
        bool zeroForOne,
        int256 amountSpecified,
        uint160 sqrtPriceLimitX96,
        bytes calldata data
    ) external returns (int256, int256);
}

interface IWETH {
    function deposit() external payable;
    function withdraw(uint256 amount) external;
}

contract TStoreExecutor {
    struct Payload {
        address target;
        bytes calldata;
        bool willCallback;
    }

    address public immutable OWNER_ADDR;
    address public immutable WETH_ADDR;

    uint256 private constant MAX_PAYLOADS = 8;
    uint256 private constant MAX_PAYLOAD_BYTES = 196; // Maximum for a V3 swap

    bool private t_allPayloadsDelivered;
    mapping(address => bool) private t_allowedCallbackAddresses;
    uint256 private t_lastPayloadIndex;
    Payload[MAX_PAYLOADS] private t_payloads;
    uint256 private t_queuedPayloadIndex;

    constructor(address weth) payable {
        OWNER_ADDR = msg.sender;
        WETH_ADDR = weth;
        if (msg.value > 0) {
            // Wrap initial Ether deposit to WETH
            IWETH(WETH_ADDR).deposit{value: msg.value}();
        }
    }

    function deliverQueuedPayload() private {
        uint256 payloadIndex = t_queuedPayloadIndex;
        Payload storage payload = t_payloads[payloadIndex];
        if (payload.willCallback) {
            t_allowedCallbackAddresses[payload.target] = true;
        }
        if (payloadIndex == t_lastPayloadIndex) {
            t_allPayloadsDelivered = true;
        } else {
            // Queue the next payload
            t_queuedPayloadIndex = payloadIndex + 1;
        }
        (bool success,) = payload.target.call(payload.calldata);
        require(success, "Payload execution failed");
    }

    function withdraw(uint256 amount, address destination) external {
        require(msg.sender == OWNER_ADDR, "Owner address mismatch");
        if (amount > address(this).balance) {
            IWETH(WETH_ADDR).withdraw(amount - address(this).balance);
        }
        (bool success,) = destination.call{value: amount}("");
        require(success, "ETH transfer failed");
    }

    function executePayloads(Payload[] calldata payloads) external payable {
        require(msg.sender == OWNER_ADDR, "Owner address mismatch");
        require(payloads.length <= MAX_PAYLOADS, "Too many payloads");

        for (uint256 i = 0; i < payloads.length; i++) {
            t_payloads[i] = payloads[i];
        }
        t_lastPayloadIndex = payloads.length - 1;

        uint256 wethBalanceBefore = IERC20(WETH_ADDR).balanceOf(address(this));

        for (uint256 i = 0; i < MAX_PAYLOADS; i++) {
            if (t_allPayloadsDelivered) break;
            deliverQueuedPayload();
        }

        require(IERC20(WETH_ADDR).balanceOf(address(this)) >= wethBalanceBefore, "WETH balance reduction");
    }

    function v2SwapCallback() private {
        for (uint256 i = 0; i < MAX_PAYLOADS; i++) {
            if (t_allPayloadsDelivered) break;
            deliverQueuedPayload();
        }
    }

    function pancakeCall(address sender, uint256 amount0Out, uint256 amount1Out, bytes calldata data) external payable {
        require(t_allowedCallbackAddresses[msg.sender], "V2 callback address not registered");
        v2SwapCallback();
    }

    function uniswapV2Call(address sender, uint256 amount0Out, uint256 amount1Out, bytes calldata data) external payable {
        require(t_allowedCallbackAddresses[msg.sender], "V2 callback address not registered");
        v2SwapCallback();
    }

    function v3SwapCallback(int256 amount0Delta, int256 amount1Delta) private {
        for (uint256 i = 0; i < MAX_PAYLOADS; i++) {
            if (t_allPayloadsDelivered) break;
            deliverQueuedPayload();
        }

        // Optimization: assume only WETH will be transferred in callback, so skip balance check
        // and just compare token0/token1 address against WETH
        if (amount1Delta > 0) {
            if (IUniswapV3Pool(msg.sender).token1() == WETH_ADDR) {
                require(IERC20(WETH_ADDR).transfer(msg.sender, uint256(amount1Delta)), "WETH transfer failed");
            }
        } else if (amount0Delta > 0) {
            if (IUniswapV3Pool(msg.sender).token0() == WETH_ADDR) {
                require(IERC20(WETH_ADDR).transfer(msg.sender, uint256(amount0Delta)), "WETH transfer failed");
            }
        }
    }

    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external payable {
        require(t_allowedCallbackAddresses[msg.sender], "V3 callback address not registered");
        v3SwapCallback(amount0Delta, amount1Delta);
    }

    function pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external payable {
        require(t_allowedCallbackAddresses[msg.sender], "V3 callback address not registered");
        v3SwapCallback(amount0Delta, amount1Delta);
    }

    receive() external payable {}
}












20369114
Found 27 profitable paths in 1.177133334s [([NodeIndex(2), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 642507739416017626, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(47), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 373251291954179823, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xdac17f958d2ee523a2206206994597c13d831ec7, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(171), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 113680088729081462, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(171), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 113680088729081462, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 642507739416017626, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(47), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 373251291954179823, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xdac17f958d2ee523a2206206994597c13d831ec7, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(1506), NodeIndex(828), NodeIndex(2)], 100173954934011535, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xb60fdf036f2ad584f79525b5da76c5c531283a1b, 0xb369daca21ee035312176eb8cf9d88ce97e0aa95, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(138), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 413581510108540920, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x853d955acef822db058eb8505911ed77f175b99e, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(12), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 112395252368189130, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(78), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 455757433973697606, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(58), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 256900904834982443, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x6b175474e89094c44da98b954eedeac495271d0f, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(10), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 308164265017871874, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(10), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 308164265017871874, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(163), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 244034338541015876, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x58b6a8a3302369daec383334672404ee733ab239, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(233), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 357917424167540465, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x45804880de22913dafe09f4980848ece6ecbaf78, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(16), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 195517530822245785, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xc00e94cb662c3520282e6f5717214004a7f26888, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(16), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 195517530822245785, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xc00e94cb662c3520282e6f5717214004a7f26888, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(138), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 413581510108540920, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x853d955acef822db058eb8505911ed77f175b99e, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(78), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 455757433973697606, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(233), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 357917424167540465, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x45804880de22913dafe09f4980848ece6ecbaf78, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(163), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 244034338541015876, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x58b6a8a3302369daec383334672404ee733ab239, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(12), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 112395252368189130, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(10), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 308164265017871874, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(10), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 308164265017871874, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(58), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 256900904834982443, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0x6b175474e89094c44da98b954eedeac495271d0f, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(16), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 195517530822245785, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xc00e94cb662c3520282e6f5717214004a7f26888, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2]), ([NodeIndex(2), NodeIndex(16), NodeIndex(84), NodeIndex(2144), NodeIndex(2)], 195517530822245785, [0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2, 0xc00e94cb662c3520282e6f5717214004a7f26888, 0xd46ba6d942050d489dbd938a2c909a5d5039a161, 0x8ab4b525bfd7787fa3a9bd30598acf0b748c52a4, 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2])]